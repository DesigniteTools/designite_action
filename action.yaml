name: Designite Action
description: Analyzes the newly commited code, detects comprehensive set of code smells, and upload reports to DCode.
branding:
    color: 'orange'
    icon: 'arrow-up-right'
inputs:
  PAT:
    description: 'Personal access token'
    default: 'No PAT provided'
  D_KEY:
    description: 'Designite license key - optional'
    default: ''
  API_KEY:
    description: "DCode API key for authentication"
    required: false
  PROJECT_ID:
    description: "DCode project ID"
    required: false

runs:
  using: "composite"
  steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: download build tools
      run: Invoke-webrequest -uri  https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe
      shell: powershell

    - name: install build tools with required packages
      run: .\vs_buildtools.exe --wait --norestart --passive --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools" --includeOptional --includeRecommended --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Workload.NetCoreTools
      shell: cmd

#    - name: set MSBuildSDKsPath env variable
#      run: echo ::set-env name=MSBuildSDKsPath::"C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\MSBuild\Sdks"
#      shell: cmd

    - name: download DesigniteConsole.exe and unpack
      run: |
        curl.exe -o DesigniteConsole.zip "https://www.designite-tools.com/assets/DesigniteConsole2.zip"
        powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('DesigniteConsole.zip','.');}"
      shell: cmd
    - name: list the directory
      run: dir
      shell: cmd
    - name: repo name
      run: echo ${{github.repository}}
      shell: cmd
    - name: Run Designite with Designite key
      if: ${{ inputs.D_KEY != '' }}
      run: |
        .\DesigniteConsole\DesigniteConsole.exe -ci -repo ${{github.repository}} -pat ${{ inputs.PAT }} -k ${{ inputs.D_KEY }} -verbose
        dir Designite_output
      shell: cmd
    - name: Run Designite without Designite key
      if: ${{ inputs.D_KEY == '' }}
      run: |
        .\DesigniteConsole\DesigniteConsole.exe -ci -repo ${{github.repository}} -pat ${{ inputs.PAT }} -verbose
        dir Designite_output
      shell: cmd
    - name: Archive Designite results
      uses: actions/upload-artifact@v4
      with:
        path: "Designite_output"
    - name: Store analysis results on DCode platform, if configured
      shell: bash
      run: |
          if [ -n "${{ inputs.API_KEY }}" ]; then
            echo "DCode API key is configured. Uploading the analysis results on DCode..."
            # Build -F arguments with numbered keys file1, file2, ...
            form_args=()
            counter=1
            for file in Designite_output/*; do
              if [ -f "$file" ]; then
                form_args+=(-F "file${counter}=@${file}")
                counter=$((counter + 1))
              fi
            done
            if [ ${#form_args[@]} -eq 0 ]; then
              echo "No files found in folder designite-output."
              exit 1
            fi
            # Build curl command (array to handle spaces safely)
            curl_cmd=("curl" "-f" "-s" "-o" "/tmp/curl_output" "-w" "%{http_code}" "-X" "POST" "-H" "X-API-Key: ${{ inputs.API_KEY }}" "-H" "X-Commit-ID: ${{ github.sha }}" "-H" "X-Tool: Designite" "${form_args[@]}" "https://dcodehub.com/api/projects/${{ inputs.PROJECT_ID }}/upload/")
            safe_cmd=("${curl_cmd[@]}")
            echo "Executing: ${safe_cmd[*]}"
            http_status=$("${curl_cmd[@]}")
            echo "HTTP status code: $http_status"
  
            echo "API response:"
            cat /tmp/curl_output
          else
            echo "DCode API key not set. Skipping uploading analysis results to DCode."
          fi